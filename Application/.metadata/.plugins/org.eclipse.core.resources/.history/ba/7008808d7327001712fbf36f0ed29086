package services.proposal;

import services.data.dao.ChannelDAO;
import services.data.dao.FieldChannelDAO;
import services.data.dao.ProposalContentDAO;
import services.data.dao.ProposalDAO;
import services.data.dao.PublicationChannelDAO;
import services.data.dao.PublicationDAO;
import services.data.dao.UserDAO;

import java.text.SimpleDateFormat;
import java.util.List;

import models.Channel;
import models.ChannelType;
import models.ContentField;
import models.DateField;
import models.Field;
import models.FieldChannel;
import models.LinkField;
import models.PlaceField;
import models.ProposalContent;
import models.Publication;
import models.PublicationChannel;
import models.TitleField;
import models.User;

public class PublicationManager {
	private ProposalDAO proposalDAO;
	private PublicationDAO publicationDAO;
	private PublicationChannelDAO publicationChannelDAO;
	private UserDAO userDAO;
	private ProposalContentDAO proposalContentDAO;
	private FieldChannelDAO fieldChannelDAO;
	private ChannelDAO channelDAO;
	
	
	
	public String manageFbPublication(Long idProposal, Long idPropCont, Long idPublisher) {
		
		this.savePublication(idProposal, idPropCont, idPublisher, ChannelType.FACEBOOK.name());
		return this.getMessageToPublish();
	}
	

	public void setProposalDAO(ProposalDAO proposalDAO) {
		this.proposalDAO = proposalDAO;
	}

	public void setPublicationDAO(PublicationDAO publicationDAO) {
		this.publicationDAO = publicationDAO;
	}

	public void setPublicationChannelDAO(PublicationChannelDAO publicationChannelDAO) {
		this.publicationChannelDAO = publicationChannelDAO;
	}

	public void setUserDAO(UserDAO userDAO) {
		this.userDAO = userDAO;
	}
	
	public void setProposalContentDAO(ProposalContentDAO proposalContentDAO) {
		this.proposalContentDAO = proposalContentDAO;
	}
	
	private String getMessageToPublish() {
		String message = "";
		List<FieldChannel> fieldsToPublishOnFb = this.fieldChannelDAO.getFbFields();
		for(FieldChannel fc : fieldsToPublishOnFb) {
			if(fc.getField() instanceof TitleField) 
				message += fc.getField().getFieldContent();
			if(fc.getField() instanceof ContentField)
				message += fc.getField().getFieldContent();
			if(fc.getField() instanceof LinkField)
				message += fc.getField().getFieldContent();
			if(fc.getField() instanceof PlaceField)
				message += fc.getField().getFieldContent();
			if(fc.getField() instanceof DateField) {
				SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");  
				message += formatter.format(((DateField) fc.getField()).getDate());	
			}
		}

		return message;	
	}
	
	private void savePublication(Long idProposal, Long idPropCont, Long idPublisher, String channelName) {
		Publication publication = new Publication();
		ProposalContent propCont = this.proposalContentDAO.getFromId(idPropCont);
		User publisher = this.userDAO.getUserById(idPublisher);
		
		publication.setContent(propCont);
		publication.setPublisher(publisher);
		publication = this.publicationDAO.insert(publication);
		
		this.savePublicationChannel(publication, channelName);		
	}
	
	private void savePublicationChannel(Publication publication, String channelName) {
		PublicationChannel pc = new PublicationChannel();
		Channel channel = this.channelDAO.getChannelByName(channelName);
		
		pc.setPublication(publication);
		pc.setChannel(channel);
		
		this.publicationChannelDAO.insert(pc);	
	}
	
	
	
	

}
