package controllers;

import play.db.jpa.JPAApi;
import play.mvc.Security.Authenticated;

import java.util.List;

import javax.inject.Inject;

import services.data.dao.ProposalDAO;
import services.data.dao.UserDAO;
import services.general.*;
import models.Proposal;
import models.Role;
import models.RoleType;
import models.User;
import models.UserVM;
import play.data.Form;
import play.data.FormFactory;
import play.db.jpa.Transactional;
import play.mvc.Controller;
import play.mvc.Result;
import play.mvc.With;
import views.html.*;

public class HomeController extends Controller {
	private final FormFactory formFactory;
	private final UserDAO userDAO;
	private UserVM userVM;
	private ProposalDAO proposalDAO;
	
	private BuildBdDefaultValue buildDB;

	@Inject
	public HomeController(FormFactory formFactory, UserDAO userDAO, ProposalDAO proposalDAO, BuildBdDefaultValue buildDB ) {
		this.formFactory = formFactory;
		this.userDAO = userDAO;
		this.proposalDAO = proposalDAO;
		
		this.buildDB = buildDB;
	}

	@Transactional
	public Result indexAction() {
		
		//buildDB.createDbDefaultValue();
		
		return getDefaultIndex(false);
	}

	@Transactional
	public Result connectRegisteredUserAction() {
		userVM = formFactory.form(UserVM.class).bindFromRequest().get();

		User user = userDAO.getUserByCredentials(userVM.getEmail(), CryptWithMD5.cryptWithMD5(userVM.getPassword()));
		
		return (user != null ? this.setUserVMAttributes(user) : getDefaultIndex(true));
	}
	
	public Result showDashboardAction() {
		this.initialiseUserVM();
		
		List<Proposal> proposals = proposalDAO.get10NewestProposals();
		
		return ok(dashboard.render(userVM, proposals));
	}

	@Transactional
	public Result connectNewUserAction() {
		userVM = formFactory.form(UserVM.class).bindFromRequest().get();

		userVM.setRole(RoleType.MEMBRE_FACULTAIRE.toString());
		User user = userVM.createUser();
		Role role = new Role();
		role.setRoleName(RoleType.MEMBRE_FACULTAIRE.toString());
		user.setUserRole(role);
		long idUser = userDAO.insertUser(user);
		userVM.setIdUser(idUser);
		createUserSession();

		return ok(dashboard.render(userVM));
	}

	@Authenticated(CustomAuthenticator.class)
	public Result logOutAction() {
		destroyUserSession();

		return redirect("/");
	}

	private void createUserSession() {
		session("idUser", Long.toString(userVM.getIdUser()));
		session("username", userVM.getUsername());
		session("email", userVM.getEmail());
		session("role", userVM.getRole());
	}
	
	private void initialiseUserVM() {
		userVM = new UserVM();
		
		this.userVM.setIdUser(Long.parseLong(session("idUser")));
		this.userVM.setUsername(session("username"));
		this.userVM.setEmail(session("email"));
		this.userVM.setRole(session("role"));	
	}

	private void destroyUserSession() {
		session().remove("idUser");
		session().remove("username");
		session().remove("email");
		session().remove("role");
	}
	
	private Result setUserVMAttributes(User user) {
		userVM.setRole(user.getUserRole().getRoleName());
		userVM.setUsername(user.getUsername());
		userVM.setIdUser(user.getIdUser());
		createUserSession();
		
		return ok(dashboard.render(userVM));	
	}
	
	private Result getDefaultIndex(boolean isFail) {
		Form<UserVM> userVMForm = formFactory.form(UserVM.class);
		
		return ok(index.render(userVMForm, isFail));
	}
	
	private Result getDashboard(UserVM userVM) {		
		List<Proposal> proposals = proposalDAO.get10NewestProposals();
		
		return ok(dashboard.render(userVM, proposals));
	}
}









