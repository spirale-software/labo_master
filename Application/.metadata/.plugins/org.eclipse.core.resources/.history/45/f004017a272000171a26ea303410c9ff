package services.proposal;

import java.util.Date;
import java.util.List;

import javax.inject.Inject;

import models.Channel;
import models.ChannelPropositionType;
import models.ChannelType;
import models.Proposal;
import models.ProposalVM;
import models.PropositionOfChannel;
import models.PropositionOfWriter;
import models.User;
import services.data.dao.ChannelDAO;
import services.data.dao.ProposalDAO;
import services.data.dao.PropositionOfChannelDAO;
import services.data.dao.PropositionOfWriterDAO;

public class ProposalEditionManager {
	private PropositionOfChannelDAO propositionOfChannelDAO;
	private PropositionOfWriterDAO propositionOfWriterDAO;
	private ProposalDAO proposalDAO;
	private ChannelDAO channelDAO;
	
	@Inject
	public ProposalEditionManager(PropositionOfChannelDAO propositionOfChannelDAO, 
			PropositionOfWriterDAO propositionOfWriterDAO, ProposalDAO proposalDAO, ChannelDAO channelDAO) {
		this.propositionOfChannelDAO = propositionOfChannelDAO;
		this.propositionOfWriterDAO = propositionOfWriterDAO;	
		this.proposalDAO = proposalDAO;
		this.channelDAO = channelDAO;
	}
	
	public ProposalVM getProposalVmFromProposal(long idProposal) {
		Proposal proposal = this.proposalDAO.getProposalById(idProposal);
		PropositionOfWriter propOfWriter = this.propositionOfWriterDAO.getByIdProposal(idProposal);
		List<PropositionOfChannel> propOfChannels = this.propositionOfChannelDAO.getAllByIdProposal(idProposal);
		
		return  getProposalVM(proposal, propOfWriter, propOfChannels);
	}
	
	public void saveModifications(ProposalVM proposalVM) {
		Long idProposal = proposalVM.getIdProposal();
		
		String proposedWriter = proposalVM.getProposedWriter();
		Date dateLine = proposalVM.getDeadLine();
		String proposalName = proposalVM.getProposalName();
		
		String twitterProposed = proposalVM.getTwitterProposed();
		String facebookProposed = proposalVM.getFacebookProposed();
		String mailingListProposed = proposalVM.getMailingListProposed();
		
		String twitterAdded = proposalVM.getTwitterAdded();
		String facebookAdded = proposalVM.getFacebookAdded();
		String mailingListAdded = proposalVM.getMailingListProposed();
		
		if(proposedWriter == null && dateLine == null && proposalName == null && twitterProposed == null && facebookProposed == null
				 && mailingListProposed == null && twitterAdded == null && facebookAdded == null && mailingListAdded == null) {
			
		} else {
			Proposal proposalToUpdate = proposalDAO.getProposalById(idProposal);
			
			if(proposedWriter != null || dateLine != null) {
				PropositionOfWriter propOfWriter = this.propositionOfWriterDAO.getByIdProposal(idProposal);
				if(proposedWriter != null) {
					User assignee = ProposalHelper.getAssignee(proposalVM);
					propOfWriter.setAssignee(assignee);
				}
				if(dateLine != null) {
					propOfWriter.setDeadLine(dateLine);
				}
				this.propositionOfWriterDAO.update(propOfWriter);
			}
			
			if(twitterProposed != null || facebookProposed != null  || mailingListProposed != null) {
				
			}
			
			if(proposalName != null) {
				proposalToUpdate.setProposalName(proposalName);
				this.proposalDAO.updateProposal(proposalToUpdate);
			}
			
			if(twitterAdded != null || facebookAdded != null || mailingListAdded != null) {
				if(twitterAdded != null) {
					PropositionOfChannel propOfChannel = new PropositionOfChannel();
					propOfChannel.setConcernedProposal(proposalToUpdate);
					propOfChannel.setType(ChannelPropositionType.Added);
					
					Channel channel = channelDAO.getChannelByName(ChannelType.TWITTER.name());
					propOfChannel.setProposedChannel(channel);
				}
			}
		}
		
		//TODO
	}
	
	
	private ProposalVM getProposalVM(Proposal proposal, PropositionOfWriter propOfWriter, 
			List<PropositionOfChannel> propOfChannels) {
		ProposalVM proposalVM = new ProposalVM();
		
		proposalVM.setIdProposal(proposal.getIdProposal());
		proposalVM.setProposalName(proposal.getProposalName());
		proposalVM.setProposalAuthorName(proposal.getAuthorOfProposal().getUsername());
		proposalVM.setDateCreation(proposal.getCreationDate().toString());
		proposalVM.setProposalState(proposal.getProposalState().toString());
		
		if(propOfWriter != null) {
			proposalVM.setProposedWriter(propOfWriter.getAssignee().getUsername());
			if(propOfWriter.getDeadLine() != null) {
				proposalVM.setDeadLine(propOfWriter.getDeadLine());
			}
		}
		
		if(propOfChannels != null) {
			String proposedChannels = "";
			for(PropositionOfChannel propOfChannel : propOfChannels) {
				proposedChannels += propOfChannel.getProposedChannel().getChannelName() + ", ";
				
			}
			proposalVM.setProposedChannels(proposedChannels);
		}
		
		
		return proposalVM;
	}
}
