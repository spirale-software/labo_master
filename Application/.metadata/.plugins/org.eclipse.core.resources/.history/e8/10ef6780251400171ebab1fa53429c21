package controllers;

import play.db.jpa.JPAApi;
import play.mvc.Security.Authenticated;
import javax.inject.Inject;

import services.data.dao.IUserDAO;
import services.data.jpaDao.UserDAO;
import services.general.*;
import models.RoleType;
import models.User;
import play.data.Form;
import play.data.FormFactory;
import play.db.jpa.Transactional;
import play.mvc.Controller;
import play.mvc.Result;
import play.mvc.With;
import views.html.*;

public class HomeController extends Controller {

	private final FormFactory formFactory;
	private final IUserDAO userDAO;
	private JPAApi jpaApi;

	@Inject
	public HomeController(FormFactory formFactory, IUserDAO userDAO, JPAApi jpaApi) {
		this.formFactory = formFactory;
		this.userDAO = userDAO;
		this.jpaApi = jpaApi;
	}

	public Result indexAction() {
		Form<User> user = formFactory.form(User.class);
			
		return ok(index.render(user));
	}

	public Result connectRegisteredUserAction() {
		User user = formFactory.form(User.class).bindFromRequest().get();
		
		createUserSession(user);
		
		user = userDAO.getUserByCredentials(user.getEmail(), user.getPassword());

		return ok(dashboard.render(user));
	}

	@Transactional
	public Result connectNewUserAction() {
		User newUser = formFactory.form(User.class).bindFromRequest().get();

		createUserSession(newUser);
		
		newUser.setRole(RoleType.MEMBRE_FACULTAIRE);
		
		newUser.setPassword(CryptWithMD5.cryptWithMD5(newUser.getPassword()));
		
		jpaApi.em().persist(newUser);

		return ok(dashboard.render(newUser));
	}
	
	@Authenticated(CustomAuthenticator.class)
	public Result logOutAction() {
		destroyUserSession();
		
		return redirect("/");
	}
	
	private void createUserSession(User user) {
		session("username", user.getPrenom());
		session("email", user.getEmail());
		session("role", user.getRole().name());		
	}
	
	private void destroyUserSession() {
		session().remove("username");
		session().remove("email");
		session().remove("role");
	}
}












